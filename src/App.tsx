import React, { useState } from "react";
import {
  Box,
  Fieldset,
  Input,
  ThemeProvider,
} from "reactro-ui-lib";
import "./App.css";
import { Score, calcScore } from "./score-calc";
import styled from "styled-components";

const initialScore: Score = {
  fields: 0,
  pastures: 0,
  grain: 0,
  vegetables: 0,
  sheep: 0,
  pigs: 0,
  cows: 0,
  freeSpots: 0,
  sheds: 0,
  clayRooms: 0,
  stoneRooms: 0,
  workers: 0,
  improvements: 0,
  bonus: 0,
};

type ScoreStateSetter = (prev: Score) => Score;
const getScoreUpdater = (ev: any, prop: string): ScoreStateSetter => {
  return (prev: Score) => {
    return {
      ...prev,
      [prop]: ev.target.value ? parseInt(ev.target.value, 10) : 0,
    };
  };
};

const App = () => {
  const [scoreA, setScoreA] = useState(initialScore);
  const [scoreB, setScoreB] = useState(initialScore);
  const [scoreC, setScoreC] = useState(initialScore);

  return (
    <ThemeProvider theme="lavender">
      <h1>–ê–≥—Ä–∏–∫–æ–ª–∞</h1>

      <Fieldset legend="‚ú® –û—á–∫–∏">
        <InputsGrid>
          <Box variant="base" width="90%">
            {calcScore(scoreA)}
          </Box>
          <Box variant="base" width="90%">
            {calcScore(scoreB)}
          </Box>
          <Box variant="base" width="90%">
            {calcScore(scoreC)}
          </Box>
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="üåæ –ó–µ—Ä–Ω–æ">
        <InputsGrid>
          <SmallInput
            placeholder="–ó–µ—Ä–Ω–æ"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "grain"));
            }}
          />
          <SmallInput
            placeholder="–ó–µ—Ä–Ω–æ"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "grain"));
            }}
          />
          <SmallInput
            placeholder="–ó–µ—Ä–Ω–æ"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "grain"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="ü•ï –û–≤–æ—â–∏">
        <InputsGrid>
          <SmallInput
            placeholder="–û–≤–æ—â–∏"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "vegetables"));
            }}
          />
          <SmallInput
            placeholder="–û–≤–æ—â–∏"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "vegetables"));
            }}
          />
          <SmallInput
            placeholder="–û–≤–æ—â–∏"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "vegetables"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="üü´ –ü–æ–ª—è">
        <InputsGrid>
          <SmallInput
            placeholder="–ü–æ–ª—è"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "fields"));
            }}
          />
          <SmallInput
            placeholder="–ü–æ–ª—è"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "fields"));
            }}
          />
          <SmallInput
            placeholder="–ü–æ–ª—è"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "fields"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="‚ôØ –í—ã–ø–∞—Å—ã">
        <InputsGrid>
          <SmallInput
            placeholder="–í—ã–ø–∞—Å—ã"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "pastures"));
            }}
          />
          <SmallInput
            placeholder="–í—ã–ø–∞—Å—ã"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "pastures"));
            }}
          />
          <SmallInput
            placeholder="–í—ã–ø–∞—Å—ã"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "pastures"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="üêë –û–≤—Ü—ã">
        <InputsGrid>
          <SmallInput
            placeholder="–û–≤—Ü—ã"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "sheep"));
            }}
          />
          <SmallInput
            placeholder="–û–≤—Ü—ã"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "sheep"));
            }}
          />
          <SmallInput
            placeholder="–û–≤—Ü—ã"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "sheep"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="üê∑ –°–≤–∏–Ω—å–∏">
        <InputsGrid>
          <SmallInput
            placeholder="–°–≤–∏–Ω—å–∏"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "pigs"));
            }}
          />
          <SmallInput
            placeholder="–°–≤–∏–Ω—å–∏"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "pigs"));
            }}
          />
          <SmallInput
            placeholder="–°–≤–∏–Ω—å–∏"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "pigs"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="üêÆ –ö–æ—Ä–æ–≤—ã">
        <InputsGrid>
          <SmallInput
            placeholder="–ö–æ—Ä–æ–≤—ã"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "cows"));
            }}
          />
          <SmallInput
            placeholder="–ö–æ—Ä–æ–≤—ã"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "cows"));
            }}
          />
          <SmallInput
            placeholder="–ö–æ—Ä–æ–≤—ã"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "cows"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="üü© –°–≤–æ–±–æ–¥–Ω—ã–µ —è—á–µ–π–∫–∏">
        <InputsGrid>
          <SmallInput
            placeholder="–°–≤–æ–±–æ–¥–Ω—ã–µ —è—á–µ–π–∫–∏"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "freeSpots"));
            }}
          />
          <SmallInput
            placeholder="–°–≤–æ–±–æ–¥–Ω—ã–µ —è—á–µ–π–∫–∏"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "freeSpots"));
            }}
          />
          <SmallInput
            placeholder="–°–≤–æ–±–æ–¥–Ω—ã–µ —è—á–µ–π–∫–∏"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "freeSpots"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="üõñ –•–ª–µ–≤–∞">
        <InputsGrid>
          <SmallInput
            placeholder="–•–ª–µ–≤–∞"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "sheds"));
            }}
          />
          <SmallInput
            placeholder="–•–ª–µ–≤–∞"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "sheds"));
            }}
          />
          <SmallInput
            placeholder="–•–ª–µ–≤–∞"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "sheds"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="üè† –ö–æ–º–Ω–∞—Ç—ã –≤ –º–∞–∑–∞–Ω–∫–µ">
        <InputsGrid>
          <SmallInput
            placeholder="–ö–æ–º–Ω–∞—Ç—ã –≤ –º–∞–∑–∞–Ω–∫–µ"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "clayRooms"));
            }}
          />
          <SmallInput
            placeholder="–ö–æ–º–Ω–∞—Ç—ã –≤ –º–∞–∑–∞–Ω–∫–µ"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "clayRooms"));
            }}
          />
          <SmallInput
            placeholder="–ö–æ–º–Ω–∞—Ç—ã –≤ –º–∞–∑–∞–Ω–∫–µ"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "clayRooms"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="üè∞ –ö–æ–º–Ω–∞—Ç—ã –≤ –¥–æ–º–µ">
        <InputsGrid>
          <SmallInput
            placeholder="–ö–æ–º–Ω–∞—Ç—ã –≤ –¥–æ–º–µ"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "stoneRooms"));
            }}
          />
          <SmallInput
            placeholder="–ö–æ–º–Ω–∞—Ç—ã –≤ –¥–æ–º–µ"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "stoneRooms"));
            }}
          />
          <SmallInput
            placeholder="–ö–æ–º–Ω–∞—Ç—ã –≤ –¥–æ–º–µ"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "stoneRooms"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="üßë‚Äçüåæ –†–æ–¥–∏—á–∏">
        <InputsGrid>
          <SmallInput
            placeholder="–†–æ–¥–∏—á–∏"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "workers"));
            }}
          />
          <SmallInput
            placeholder="–†–æ–¥–∏—á–∏"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "workers"));
            }}
          />
          <SmallInput
            placeholder="–†–æ–¥–∏—á–∏"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "workers"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="‚¨ÜÔ∏è –£–ª—É—á—à–µ–Ω–∏—è">
        <InputsGrid>
          <SmallInput
            placeholder="–£–ª—É—á—à–µ–Ω–∏—è"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "improvements"));
            }}
          />
          <SmallInput
            placeholder="–£–ª—É—á—à–µ–Ω–∏—è"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "improvements"));
            }}
          />
          <SmallInput
            placeholder="–£–ª—É—á—à–µ–Ω–∏—è"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "improvements"));
            }}
          />
        </InputsGrid>
      </Fieldset>

      <Fieldset legend="ü™ô –ë–æ–Ω—É—Å—ã">
        <InputsGrid>
          <SmallInput
            placeholder="–ë–æ–Ω—É—Å—ã"
            type="tel"
            onChange={(ev) => {
              setScoreA(getScoreUpdater(ev, "bonus"));
            }}
          />
          <SmallInput
            placeholder="–ë–æ–Ω—É—Å—ã"
            type="tel"
            onChange={(ev) => {
              setScoreB(getScoreUpdater(ev, "bonus"));
            }}
          />
          <SmallInput
            placeholder="–ë–æ–Ω—É—Å—ã"
            type="tel"
            onChange={(ev) => {
              setScoreC(getScoreUpdater(ev, "bonus"));
            }}
          />
        </InputsGrid>
      </Fieldset>
    </ThemeProvider>
  );
};

const SmallInput = styled(Input)`
  width: 80%;
`;

const GridContainer = styled.div`
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* 3 columns */
  grid-template-rows: repeat(10, auto); /* 10 rows */
  gap: 10px; /* Space between grid items */
`;

const InputsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 10px;
`;

export default App;
